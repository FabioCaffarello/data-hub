// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create-project generator should generate a python project into a different folder 1`] = `
Object {
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "shared-test",
  "projectType": "application",
  "root": "apps/shared/test",
  "sourceRoot": "apps/shared/test/shared_test",
  "tags": Array [],
  "targets": Object {
    "add": Object {
      "executor": "@nxlv/python:add",
      "options": Object {},
    },
    "install": Object {
      "executor": "@nxlv/python:install",
      "options": Object {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": Object {
      "executor": "@nrwl/workspace:run-commands",
      "options": Object {
        "command": "poetry lock --no-update",
        "cwd": "apps/shared/test",
      },
    },
    "remove": Object {
      "executor": "@nxlv/python:remove",
      "options": Object {},
    },
    "update": Object {
      "executor": "@nxlv/python:update",
      "options": Object {},
    },
  },
}
`;

exports[`create-project generator should generate a python project into a different folder 2`] = `
"# shared-test

## About

Project description here.

[API Documentation]()

## [Change log](CHANGELOG.md)
"
`;

exports[`create-project generator should generate a python project into a different folder 3`] = `
"[tool.coverage.run]
branch = true
source = [ \\"shared_test\\" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = \\"--cov --cov-fail-under=100 --cov-report html:'../../../coverage/apps/shared/test/html' --cov-report xml:'../../../coverage/apps/shared/test/coverage.xml' --junitxml='../../../reports/apps/shared/test/unittests/junit.xml' --html='../../../reports/apps/shared/test/unittests/html/index.html'\\"

[tool.poetry]
name = \\"unittest-test-pkg-name\\"
version = \\"1.0.0\\"
description = \\"\\"
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = \\"shared_test\\"

  [tool.poetry.dependencies]
  python = \\">=3.8,<3.10\\"

[build-system]
requires = [\\"poetry-core==1.1.0b3\\"]
build-backend = \\"poetry.core.masonry.api\\"
"
`;

exports[`create-project generator should generate a python project into a different folder 4`] = `
"# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## Unreleased
"
`;

exports[`create-project generator should generate a python project into a different folder 5`] = `
"\\"\\"\\"\\"\\"\\"
"
`;

exports[`create-project generator should generate a python project using description option 1`] = `
"[tool.coverage.run]
branch = true
source = [ \\"test\\" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = \\"--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --junitxml='../../reports/apps/test/unittests/junit.xml' --html='../../reports/apps/test/unittests/html/index.html'\\"

[tool.poetry]
name = \\"unittest-test-pkg-name\\"
version = \\"1.0.0\\"
description = \\"My custom description\\"
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = \\"test\\"

  [tool.poetry.dependencies]
  python = \\">=3.8,<3.10\\"

[build-system]
requires = [\\"poetry-core==1.1.0b3\\"]
build-backend = \\"poetry.core.masonry.api\\"
"
`;

exports[`create-project generator should generate a python project with tags 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": Array [
    "python-project",
    "nx",
    "poetry",
    "tox",
  ],
  "targets": Object {
    "add": Object {
      "executor": "@nxlv/python:add",
      "options": Object {},
    },
    "install": Object {
      "executor": "@nxlv/python:install",
      "options": Object {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": Object {
      "executor": "@nrwl/workspace:run-commands",
      "options": Object {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": Object {
      "executor": "@nxlv/python:remove",
      "options": Object {},
    },
    "update": Object {
      "executor": "@nxlv/python:update",
      "options": Object {},
    },
  },
}
`;

exports[`create-project generator should successfully generate a python library project 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "library",
  "root": "libs/test",
  "sourceRoot": "libs/test/test",
  "tags": Array [],
  "targets": Object {
    "add": Object {
      "executor": "@nxlv/python:add",
      "options": Object {},
    },
    "install": Object {
      "executor": "@nxlv/python:install",
      "options": Object {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": Object {
      "executor": "@nrwl/workspace:run-commands",
      "options": Object {
        "command": "poetry lock --no-update",
        "cwd": "libs/test",
      },
    },
    "remove": Object {
      "executor": "@nxlv/python:remove",
      "options": Object {},
    },
    "update": Object {
      "executor": "@nxlv/python:update",
      "options": Object {},
    },
  },
}
`;

exports[`create-project generator should successfully generate a python library project 2`] = `
"# test

## About

Project description here.

[API Documentation]()

## [Change log](CHANGELOG.md)
"
`;

exports[`create-project generator should successfully generate a python library project 3`] = `
"[tool.coverage.run]
branch = true
source = [ \\"test\\" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = \\"--cov --cov-fail-under=100 --cov-report html:'../../coverage/libs/test/html' --cov-report xml:'../../coverage/libs/test/coverage.xml' --junitxml='../../reports/libs/test/unittests/junit.xml' --html='../../reports/libs/test/unittests/html/index.html'\\"

[tool.poetry]
name = \\"unittest-test-pkg-name\\"
version = \\"1.0.0\\"
description = \\"\\"
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = \\"test\\"

  [tool.poetry.dependencies]
  python = \\">=3.8,<3.10\\"

[build-system]
requires = [\\"poetry-core==1.1.0b3\\"]
build-backend = \\"poetry.core.masonry.api\\"
"
`;

exports[`create-project generator should successfully generate a python library project 4`] = `
"# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## Unreleased
"
`;

exports[`create-project generator should successfully generate a python library project 5`] = `
"\\"\\"\\"\\"\\"\\"
"
`;

exports[`create-project generator should successfully generate a python library project with root pyproject.toml 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "library",
  "root": "libs/test",
  "sourceRoot": "libs/test/test",
  "tags": Array [],
  "targets": Object {
    "add": Object {
      "executor": "@nxlv/python:add",
      "options": Object {},
    },
    "install": Object {
      "executor": "@nxlv/python:install",
      "options": Object {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": Object {
      "executor": "@nrwl/workspace:run-commands",
      "options": Object {
        "command": "poetry lock --no-update",
        "cwd": "libs/test",
      },
    },
    "remove": Object {
      "executor": "@nxlv/python:remove",
      "options": Object {},
    },
    "update": Object {
      "executor": "@nxlv/python:update",
      "options": Object {},
    },
  },
}
`;

exports[`create-project generator should successfully generate a python library project with root pyproject.toml 2`] = `
"[tool.poetry]
name = \\"unit test\\"

  [tool.poetry.dependencies]
  python = \\">=3.8,<3.10\\"

    [tool.poetry.dependencies.unittest-test-pkg-name]
    path = \\"libs/test\\"
    develop = true

[build-system]
requires = [ \\"poetry-core==1.1.0b3\\" ]
build-backend = \\"poetry.core.masonry.api\\"
"
`;

exports[`create-project generator should successfully generate a python project 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": Array [],
  "targets": Object {
    "add": Object {
      "executor": "@nxlv/python:add",
      "options": Object {},
    },
    "install": Object {
      "executor": "@nxlv/python:install",
      "options": Object {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": Object {
      "executor": "@nrwl/workspace:run-commands",
      "options": Object {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": Object {
      "executor": "@nxlv/python:remove",
      "options": Object {},
    },
    "update": Object {
      "executor": "@nxlv/python:update",
      "options": Object {},
    },
  },
}
`;

exports[`create-project generator should successfully generate a python project 2`] = `
"# test

## About

Project description here.

[API Documentation]()

## [Change log](CHANGELOG.md)
"
`;

exports[`create-project generator should successfully generate a python project 3`] = `
"[tool.coverage.run]
branch = true
source = [ \\"test\\" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = \\"--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --junitxml='../../reports/apps/test/unittests/junit.xml' --html='../../reports/apps/test/unittests/html/index.html'\\"

[tool.poetry]
name = \\"unittest-test-pkg-name\\"
version = \\"1.0.0\\"
description = \\"\\"
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = \\"test\\"

  [tool.poetry.dependencies]
  python = \\">=3.8,<3.10\\"

[build-system]
requires = [\\"poetry-core==1.1.0b3\\"]
build-backend = \\"poetry.core.masonry.api\\"
"
`;

exports[`create-project generator should successfully generate a python project 4`] = `
"# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## Unreleased
"
`;

exports[`create-project generator should successfully generate a python project 5`] = `
"\\"\\"\\"\\"\\"\\"
"
`;

exports[`create-project generator should successfully generate a python project with custom module name 1`] = `
Object {
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "root": "apps/test",
  "sourceRoot": "apps/test/mymodule",
  "tags": Array [],
  "targets": Object {
    "add": Object {
      "executor": "@nxlv/python:add",
      "options": Object {},
    },
    "install": Object {
      "executor": "@nxlv/python:install",
      "options": Object {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": Object {
      "executor": "@nrwl/workspace:run-commands",
      "options": Object {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": Object {
      "executor": "@nxlv/python:remove",
      "options": Object {},
    },
    "update": Object {
      "executor": "@nxlv/python:update",
      "options": Object {},
    },
  },
}
`;

exports[`create-project generator should successfully generate a python project with custom module name 2`] = `
"# test

## About

Project description here.

[API Documentation]()

## [Change log](CHANGELOG.md)
"
`;

exports[`create-project generator should successfully generate a python project with custom module name 3`] = `
"[tool.coverage.run]
branch = true
source = [ \\"mymodule\\" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = \\"--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --junitxml='../../reports/apps/test/unittests/junit.xml' --html='../../reports/apps/test/unittests/html/index.html'\\"

[tool.poetry]
name = \\"unittest-test-pkg-name\\"
version = \\"1.0.0\\"
description = \\"\\"
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = \\"mymodule\\"

  [tool.poetry.dependencies]
  python = \\">=3.8,<3.10\\"

[build-system]
requires = [\\"poetry-core==1.1.0b3\\"]
build-backend = \\"poetry.core.masonry.api\\"
"
`;

exports[`create-project generator should successfully generate a python project with custom module name 4`] = `
"# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## Unreleased
"
`;

exports[`create-project generator should successfully generate a python project with custom module name 5`] = `
"\\"\\"\\"\\"\\"\\"
"
`;
